#!/user/local/awk -f

# $Header: /home/kst/calc/calc,v 1.9 1993-07-14 16:33:47-07 kst Exp $

#
# currently valid stack runs from 1 to tos inclusive
#

function pop()
{
    return stack[tos--]
} # end pop

function push(item)
{
    stack[++tos] = item
} # end push

function dump()
{
    if (tos > 0) {
	for (temp = 1; temp <= tos; temp ++) {
	    printf("%3d: ", temp)
	    print stack[temp]
	}
    }
    else {
	print "  <empty stack>"
    }
} # end dump

function show_vars()
{
    for (name in variables) {
	printf("%-8s = ", name);
	print(variables[name])
    }
} # end show_vars

function numeric(x)
{
    if (x + 0 == 0) {
	if (x == 0) {
	    return 1
	}
	else {
	    return 0
	}
    }
    else {
	return 1
    }
} # end numeric

function help()
{
    print "    +-*/%^    : arithmetic operators"
    print "    **        : synonym for ^"
    print "    --        : negate"
    print "    //        : reciprocal"
    print "    dup       : duplicate top of stack (tos)"
    print "    drop      : drop tos"
    print "    clear     : clear stack"
    print "    swap      : swap top two stack elements"
    print "    sin, cos, tan, asin, acos, atan:"
    print "                trig functions (radians)"
    print "    atan2     : atan(y/x)"
    print "    exp       : e^x"
    print "    ln        : log base e"
    print "    log       : log base 10"
    print "    int       : integer part (truncate towards 0)"
    print "    srand     : set random seed"
    print "    srandx    : set random seed to specified value"
    print "    rand      : random number"
    print "    sqrt      : square root"
    print "    vars      : show all variables"
    print "    <name>=   : assign variable"
    print "    ofmt=     : show output format"
    print "    ofmt=<fmt>: set output format"
    print "    .         : display tos"
    print "    ,         : dump stack"
#   print "    ...       : continue (used on command line)"
    print "    \\         : inhibit stack dump"
} # end help

function eval(word)
{
    if (word == "dup") {
	if (tos < 1) { print "dup error: empty stack" ; return }
	push(stack[tos])
    }

    else if (word == "drop") {
	if (tos < 1) { print "drop error: empty stack" ; return }
	pop()
    }

    else if (word == "clear") {
	tos = 0
    }

    else if (word == "depth") {
	push(tos)
    }

    else if (word == "swap") {
	if (tos < 2) { print "swap error: too few arguments" ; return }
	temp1 = pop()
	temp2 = pop()
	push(temp1)
	push(temp2)
    }

    else if (word == "+") {
	if (tos < 2) { print "+ error: too few arguments" ; return }
	push(pop()+pop())
    }

    else if (word == "-") {
	if (tos < 2) { print "- error: too few arguments" ; return }
	y = pop()
	x = pop()
	push(x - y)
    }

    else if (word == "*") {
	if (tos < 2) { print "* error: too few arguments" ; return }
	push(pop() * pop())
    }

    else if (word == "/") {
	if (tos < 2) { print "/ error: too few arguments" ; return }
	y = pop()
	x = pop()
	push(x / y)
    }

    else if (word == "%") {
	if (tos < 2) { print "% error: too few arguments" ; return }
	y = pop()
	x = pop()
	push(y % x)
    }

    else if (word == "^" || word == "**") {
	if (tos < 2) { print "/ error: too few arguments" ; return }
	y = pop()
	x = pop()
	push(x ^ y)
    }

    else if (word == "--") {
	push(-pop())
    }

    else if (word == "//") {
	push(1.0/pop())
    }

    else if (word == "sin") {
	push(sin(pop()))
    }

    else if (word == "cos") {
	push(cos(pop()))
    }

    else if (word == "tan") {
	x = pop()
	push(sin(x) / cos(x))
    }

    else if (word == "asin") {
	x = pop()
	push(atan2(x, sqrt(1 - x * x)))
    }

    else if (word == "acos") {
	x = pop()
	push(atan2(sqrt(1 - x * x), x))
    }

    else if (word == "atan") {
	push(atan2(pop(), 1.0))
    }

    else if (word == "atan2") {
	x = pop()
	push(atan2(pop(), x))
    }

    else if (word == "exp") {
	push(exp(pop()))
    }

    else if (word == "ln") {
	push(log(pop()))
    }

    else if (word == "log") {
	push(log(pop()) / log(10.0))
    }

    else if (word == "int") {
	push(int(pop()))
    }

    else if (word == "srandx") {
	srand(pop())
    }

    else if (word == "srand") {
	srand()
    }

    else if (word == "rand") {
	push(rand())
    }

    else if (word == "sqrt") {
	push(sqrt(pop()))
    }

    else if (word == "vars") {
	show_vars()
    }

    else if ( word ~ "^ofmt=$" ) {
	printf("output format == \"%s\"\n", OFMT)
    }

    else if ( word ~ "^ofmt=" ) {
	OFMT = substr(word, 6)
    }

    else if (word ~ "=$") {
	var_name = substr(word, 1, length(word)-1)
	if (var_name in reserved) { print "= error: reserved name" ; return }
	variables[var_name] = pop()
    }

    else if (word in variables) {
	push(variables[word])
    }

    else if (word == "?" || word == "help") {
	help()
	inhibit_dump = 1
    }

    else if (word == ".") {
	if (tos < 1) { print ". error: empty stack" ; return }
	print pop()
	inhibit_dump = 1
    }

    else if (word == ",") {
	dump()
    }

#   else if (word == "...") {
#       Continue = 1
#   }

    else if (word == "\\") {
	inhibit_dump = 1
    }

    else if (numeric(word)) {
	tos++
	stack[tos] = word + 0
    }

    else {
        print "error: unrecognized word " word
    }
} #  end eval

BEGIN	{
	    tos = 0

	    reserved["acos"]   = 1
	    reserved["asin"]   = 1
	    reserved["atan"]   = 1
	    reserved["atan2"]  = 1
	    reserved["clear"]  = 1
	    reserved["cos"]    = 1
	    reserved["depth"]  = 1
	    reserved["drop"]   = 1
	    reserved["dup"]    = 1
	    reserved["exp"]    = 1
	    reserved["help"]   = 1
	    reserved["int"]    = 1
	    reserved["ln"]     = 1
	    reserved["log"]    = 1
	    reserved["ofmt"]   = 1
	    reserved["rand"]   = 1
	    reserved["sin"]    = 1
	    reserved["sqrt"]   = 1
	    reserved["srand"]  = 1
	    reserved["srandx"] = 1
	    reserved["swap"]   = 1
	    reserved["tan"]    = 1
	    reserved["vars"]   = 1

	    variables["pi"] = 3.14159265358979323846
	    variables["e"]  = 2.71828182845904523536

	    OFMT = "%.16g"

	    if (ARGC > 1) {
	        arg_string = ""
	        for (i = 1; i < ARGC; i ++) {
		    arg_string = arg_string " " ARGV[i]
		}
		split(arg_string, arg_list, " ");
		for (i = 1; i in arg_list; i ++) {
		    arg = arg_list[i]
		    eval(arg)
		}
		if (arg != "," && ! inhibit_dump) {
		    dump()
		}
#		if (! Continue) {
		    exit
#		}
	    }
	} # end BEGIN block

	{ # main loop
	    inhibit_dump = 0
	    for (i = 1; i <= NF; i ++) {
		eval($i)
	    }
	    if ($NF != "," && ! inhibit_dump) {
		dump()
	    }
	} # end main loop
